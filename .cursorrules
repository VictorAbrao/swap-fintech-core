# SwapOne Fintech Project - Cursor Rules

## 🚀 Server Configuration
- **Frontend (Vite):** MUST run on port 5001
- **Backend (Node.js):** MUST run on port 5002
- **Never change these ports** - they are configured for production deployment

## 📁 Project Structure
```
swapone-fintech-one/
├── swapone-fintech-api/     # Backend (Node.js/Express)
├── swapone-fintech-front/   # Frontend (React/Vite)
└── database_migrations/     # SQL migrations
```

## 🔧 Development Commands
```bash
# Backend (port 5002)
cd swapone-fintech-api && npm start

# Frontend (port 5001) 
cd swapone-fintech-front && npm run dev
```

## 🌐 URLs
- **Frontend:** http://localhost:5001/ or https://app.swapone.global/
- **Backend API:** http://localhost:5002/ or https://api.swapcambio.com/
- **Admin Panel:** https://app.swapone.global/admin-panel

## 📋 Key Features
- **Admin Mesa:** Dropdown menu with FX Trade, Arbitrage, Transfer submenus
- **Soft Delete:** Implemented for all entities (clients, users, transactions, etc.)
- **Email Notifications:** Sent to push@swapone.global (BOARD_EMAIL env var)
- **Fixed Rate Amount:** Stored in database and applied to operations

## 🗄️ Database
- **Supabase:** Primary database
- **Tables:** clients, profiles, operations_history, beneficiaries, wallets, client_markups
- **Soft Delete:** All tables have `deleted_at` and `is_deleted` columns

## 🔐 Authentication
- **JWT Tokens:** Used for API authentication
- **Roles:** admin, client, user
- **Protected Routes:** All admin routes require admin role

## 📧 Email Configuration
- **SMTP:** Outlook (smtp-mail.outlook.com:587)
- **From:** comunicacao@swapone.global
- **Board Notifications:** push@swapcambio.com (default)
- **Notification Emails:** Configured via `NOTIFICATION_EMAILS` env var (comma-separated)
- **Environment Variables:** EMAIL_USER, EMAIL_PASS, NOTIFICATION_EMAILS

## 🎯 Important Notes
- Always check if servers are running on correct ports before making changes
- Frontend hot reload may fail if port 5001 is not available
- Backend API must be running for frontend to work properly
- Use `ps aux | grep -E "(node|npm)"` to check running processes
- Use `netstat -tlnp | grep :500` to check port usage

## 🚨 Common Issues
- **Port conflicts:** Kill existing processes before starting new ones
- **WebSocket errors:** Usually caused by wrong port configuration
- **Import errors:** Check file paths and ensure files exist
- **API errors:** Verify backend is running on port 5002

## 📝 Code Standards
- Use TypeScript for frontend
- Use JavaScript for backend
- Follow existing patterns for API calls
- Use toast notifications for user feedback
- Implement proper error handling
- Use soft delete instead of hard delete

## 🌍 Translation & i18n Rules
- **NEVER use hardcoded text in the user interface**
- **ALWAYS use the translation system (`t()` function) for ALL user-facing text**
- **This includes but is not limited to:**
  - Menu names and navigation items
  - Table titles and column headers
  - Button labels
  - Modal titles and content
  - Form labels and placeholders
  - Error messages
  - Success messages
  - Tooltips
  - Filter labels and options
  - Status names
  - Operation type names
  - Any text visible to the end user
- **Add missing translation keys** to both `swapone-fintech-front/src/locales/pt-BR.json` and `swapone-fintech-front/src/locales/en.json`
- **When creating new pages or components**, immediately translate ALL text, never leave hardcoded Portuguese/English
- **The only exceptions** are:
  - Variable values (like `{client.name}`)
  - Technical identifiers (like API endpoints, database fields)
  - Code comments

## 🔄 Git Workflow
- **ALWAYS** run `./auto-commit.sh` after completing any development task
- **ALWAYS** commit changes to GitHub at the end of each request
- **Repository:** https://github.com/VictorAbrao/swap-fintech-core
- **Branch:** main
- **Auto-commit script:** `./auto-commit.sh` (executable)

## 🚨 MANDATORY RULE
**EVERY DEVELOPMENT SESSION MUST END WITH:**
1. Run `./auto-commit.sh` to commit and push changes
2. Verify the push was successful
3. Confirm the changes are visible on GitHub

**This rule is NON-NEGOTIABLE and must be followed for every request completion.**
